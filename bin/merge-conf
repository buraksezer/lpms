#!/usr/bin/env python
# Copyright 2009 - 2011 Burak Sezer <burak.sezer@linux.org.tr>
# 
# This file is part of lpms
#  
# lpms is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#   
# lpms is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#   
# You should have received a copy of the GNU General Public License
# along with lpms.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys

from lpms import out
from lpms import utils
from lpms import shelltools
from lpms import constants as cst


class Merge(object):
    def __init__(self):
        self.i = 0
        self.query = os.listdir(cst.merge_conf)
        self.q = ""
        self.myfile = ""

    def show(self):
        self.i += 1
        self.myfile = "/".join(self.q.split("|"))
        out.write(out.color("("+str(self.i)+"/"+str(len(self.query))+")", "green"))
        out.write(" "+self.myfile+"\n\n")
        os.system("diff -Naur %s %s" % (self.myfile, self.myfile+".lpms-backup"))
        out.write("\n")

        out.normal("[U]se new file, [R]emove new file, [P]ass\n")

    def start(self):
        for self.q in self.query:
            # show diff output
            self.show()

            answer = sys.stdin.readline().strip()
            if answer == "U" or answer == "u":
                shelltools.move(self.myfile+".lpms-backup", self.myfile)
                shelltools.remove_file(os.path.join(cst.merge_conf, self.q))
            elif answer == "R" or answer == "r":
                shelltools.remove_file(self.myfile+".lpms-backup")
                shelltools.remove_file(os.path.join(cst.merge_conf, self.q))
            elif answer == "P" or answer == "p":
                continue
            else:
                out.warn("invalid character: %s" % answer)
                show(i)

def main():
    for cmd in sys.argv[0:]:
        if cmd == "--help":
            out.write("configuration manager for lpms\n")
            return
        elif cmd == "--version":
            our.write("%s-%s" % (__name__, __version__))
            return
        elif cmd == "--pretend" or cmd == "-p":
            return

        # run the program
        Merge().start()

if __name__ == '__main__':
    main()
