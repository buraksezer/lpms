#!/usr/bin/env python2
# Copyright 2009 - 2011 Burak Sezer <burak.sezer@linux.org.tr>
# 
# This file is part of lpms
#  
# lpms is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#   
# lpms is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#   
# You should have received a copy of the GNU General Public License
# along with lpms.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import signal
import shelve

# Append lpms' path to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

import lpms

from lpms import out
from lpms import utils
from lpms import shelltools
from lpms import constants as cst

APP_NAME = "merge-conf"
APP_VERSION = "0.3"

class MergeConf(object):
    def __init__(self):
        self.index = 0
        self.success = []
        self.merge_conf_file = os.path.join(cst.root, cst.merge_conf_file)
        if os.access(self.merge_conf_file, os.R_OK):
            if not os.access(self.merge_conf_file, os.W_OK):
                out.error("%s not writable, please check that file." % self.merge_conf_file)
                lpms.terminate()
            self.query = shelve.open(self.merge_conf_file)
        else:
            out.error("%s not readable, please check that file." % self.merge_conf_file)
            lpms.terminate()

    def delete_from_db(self, package, item):
        tmp = self.query[package]
        tmp.remove(item)
        self.query[package] = tmp
        if not self.query[package]:
            del self.query[package]

    def show(self, item):
        diff_path = utils.executable_path("diff")
        os.system("%s -Naur %s %s" % (diff_path, item, item+".lpms-backup"))
        out.write("\n")
        out.normal("[U]se new file, [R]emove new file, [P]ass, [Q]uit\n")

    def start(self):
        for package in self.query:
            for item in self.query[package]:
                if not os.path.isfile(item+".lpms-backup"):
                    self.delete_from_db(package, item)
                    continue
                # show diff output
                out.normal("%s provides a new version of %s or that file was manipulated by you.\n" % (package, item))
                self.show(item)
                answer = sys.stdin.readline().strip()
                if answer == "U" or answer == "u":
                    shelltools.move(item+".lpms-backup", item)
                    self.delete_from_db(package, item)
                elif answer == "R" or answer == "r":
                    shelltools.remove_file(conf_file+".lpms-backup")
                    self.delete_from_db(package, item)
                elif answer == "P" or answer == "p":
                    continue
                elif answer == "Q" or answer == "q":
                    return
                else:
                    out.warn("invalid character: %s" % answer)
                    show(item)

def main():
    for cmd in sys.argv[0:]:
        if cmd == "--help" or cmd == "-h":
            out.normal("%s -- Configuration file manager for lpms." % APP_NAME)
            out.write("Simply, run 'merge-conf' command to see changed configuration files.\n")
            sys.exit(0)
        elif cmd == "--version":
            out.write("%s %s\n" %  (APP_NAME, APP_VERSION))
            sys.exit(0)

    if not utils.check_root():
        out.warn("you must be root for doing this.")
        sys.exit(0)
    
    # run the program
    operator = MergeConf()
    operator.start()
    operator.query.close()
    sys.exit(0)

def exit_handler(signum, frame):
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGTERM, signal.SIG_IGN)
    lpms.terminate("merge-conf terminated by the user. So this may be harmfull!")

signal.signal(signal.SIGINT, exit_handler)
signal.signal(signal.SIGTERM, exit_handler)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

if __name__ == '__main__':
    main()

